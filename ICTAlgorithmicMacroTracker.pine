// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © JassM13

//@version=5
indicator("ICT Algorithmic Macro Tracker [Krit4nta]", shorttitle="Macro Tracker°", overlay=true)

// --- INPUTS ---
macroColor = input.color(color.new(#ffffff, 0), title="Macro Color")
showMacroLabel = input.bool(true, title="Macro Label?")
showTime = input.bool(false, title="Show Time?")
showMacroProjections = input.bool(false, title="Macro Projections?")
macroCount = input.int(3, title="Number of Micros to Show", minval=1)

// --- CALCULATIONS ---
var line[] EXT = array.new_line()
microCounter = 0
oneDayMS = 86400000
oneBarMS = time_close - time
one = ta.highest(timeframe.in_seconds("15") / timeframe.in_seconds(timeframe.period)) + syminfo.mintick * 10
y_btm_Line1 = one
y_top_Line1 = one + syminfo.mintick * 5

time_isMacro(int H_start, int M_start, int H_end, int M_end) =>
    m = minute(time, "America/New_York")
    m >= M_start or m < M_end

controlMacroLine(macro m, bool isMacroTime) =>
    if isMacroTime and m.lines.size() >= 2
        m.label.set_x(math.round(math.avg(m.lines.get(m.lines.size() - 2).get_x1(), time)))
        if high > m.lines.last().get_y2() - syminfo.mintick * 10
            m.lines.get(m.lines.size() - 2).set_y2(high + (syminfo.mintick * 10))
            m.lines.last().set_y1(high + (syminfo.mintick * 10))
            m.lines.last().set_y2(high + (syminfo.mintick * 10))
            m.label.set_y(high + (syminfo.mintick * 10))
        if na or m.lines.last().get_x2() == time
            m.lines.last().set_x2(time + oneBarMS)

controlMacroBox(box[] macroBoxes, bool isMacroTime, bool _friday) =>
    dly = _friday ? oneDayMS * 3 : oneDayMS
    if na or isMacroTime
        macroBoxes.last().set_right(time + dly)

// --- MACRO DRAWING FUNCTIONS ---
macroOC(macro m, bool isMacroTime, string _kzTime, bool _friday) =>
    dly = _friday ? oneDayMS * 3 : oneDayMS
    _txt = showTime ? "MACRO" + "\n" + _kzTime : "MACRO"
    _tt = "MACRO\n" + _kzTime

    // Overlay False
    if not isMacroTime[1] and isMacroTime
        _vline1 = line.new(time, y_btm_Line1, time, y_top_Line1, xloc=xloc.bar_time, color=macroColor)
        m.lines.push(_vline1)
        _hline = line.new(time, y_top_Line1, time + oneBarMS, y_top_Line1, xloc=xloc.bar_time, color=macroColor)
        m.lines.push(_hline)
        if showMacroProjections
            EXT.push(line.new(time, high, time, _vline1.get_y2(), xloc=xloc.bar_time, color=macroColor, style=line.style_dotted))

        m.label := label.new(time, m.lines.get(m.lines.size() - 2).get_y2(), showMacroLabel ? _txt : "", tooltip=_tt, xloc=xloc.bar_time, style=label.style_label_down, color=color.new(#ffffff, 100), textcolor=macroColor, size=size.small)

    if isMacroTime[1] and not isMacroTime and m.lines.size() > 0 and m.label != na
        _vline2 = line.new(time, y_btm_Line1, time, y_top_Line1, xloc=xloc.bar_time, color=macroColor)
        m.label.set_x(math.round(math.avg(m.lines.get(m.lines.size() - 2).get_x1(), time)))
        if y_top_Line1 > m.lines.get(m.lines.size() - 2).get_y2()
            m.lines.get(m.lines.size() - 2).set_y2(y_top_Line1)
            m.lines.last().set_y1(y_top_Line1)
            m.lines.last().set_y2(y_top_Line1)
            m.label.set_y(y_top_Line1)
        else if y_top_Line1 < m.lines.get(m.lines.size() - 2).get_y2()
            _vline2.set_y2(m.lines.get(m.lines.size() - 2).get_y2())
        if showMacroProjections
            EXT.push(line.new(time, high, time, _vline2.get_y2(), xloc=xloc.bar_time, color=macroColor, style=line.style_dotted))

        m.lines.push(_vline2)

    if m.lines.size() > 0 and m.label != na
        controlMacroLine(m, isMacroTime)

// --- LOGIC ---
type macro
    int openTime = na
    float closeTime = na
    line[] lines = array.new_line()
    label label = na

var box[] macroBoxes = array.new_box()
var macro[] macros = array.new<macro>()

for i = 23 to 0
    currentHour = hour(time, "America/New_York")
    currentMinute = minute(time, "America/New_York")
    macroStartTimeHour = currentHour == 0 ? 23 : currentHour - 1
    macroStartTimeMinute = 50
    macroEndTimeHour = currentHour
    macroEndTimeMinute = 10
    isMacroTime = time_isMacro(macroStartTimeHour, macroStartTimeMinute, macroEndTimeHour, macroEndTimeMinute)
    macroLabelText = str.tostring(macroStartTimeHour) + ":50 - " + str.tostring(macroEndTimeHour) + ":10"

    if macros.size() >= macroCount
        macros.shift().delete()

    // Add new macro to the array
    newMacro = macro.new()
    newMacro.openTime := macroStartTimeHour * 100 + macroStartTimeMinute
    macros.push(newMacro)

    macroOC(macros.last(), isMacroTime, macroLabelText, dayofweek(time) == dayofweek.friday and syminfo.type != 'crypto')

    // Update close time for the current macro
    if not isMacroTime
        macros.last().closeTime := currentHour * 100 + currentMinute